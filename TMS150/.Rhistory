h$counts= h$counts/sum(h$counts)
plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample)#theta hat stjerna
h$counts= h$counts/sum(h$counts)
plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample)#theta hat stjerna
h$counts= h$counts/sum(h$counts)
plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample)#theta hat stjerna
#h$counts= h$counts/sum(h$counts)
#plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample)#theta hat stjerna
#h$counts= h$counts/sum(h$counts)
#plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample)#theta hat stjerna
#h$counts= h$counts/sum(h$counts)
#plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:10000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample)#theta hat stjerna
#h$counts= h$counts/sum(h$counts)
#plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample)#theta hat stjerna
#h$counts= h$counts/sum(h$counts)
#plot(h,freq=TRUE,ylab="Percentages")
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
?hist
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample,xlab="x")#theta hat stjerna
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="BLUE",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample,xlab="x",col="BLUE")#theta hat stjerna
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="RED",xlab="x",ylab="density function")
ranGamma = rgamma(100,shape=2,scale=2)
hist(ranGamma)
BSsamplemean <- function (x)
{
theta <- c();
for (i in 1:1000)
theta = append(theta,mean(sample(x,100,replace=TRUE)))
theta
}
bootSample = BSsamplemean(ranGamma)
h = hist(bootSample,xlab="x",col="BLUE")#theta hat stjerna
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="RED",xlab="x",ylab="density function")
hist(rgamma(1000,shape=200,scale=1/50)) # theta hat
bias = mean(bootSample)-mean(ranGamma)
variance = var(bootSample)
######################
statistic <- function(x,d) mean(x[d])
bs = boot::boot(ranGamma,statistic,1000)
hist(bs$t)
#######################
# CIs
bootSample = sort(bootSample)
t25 = bootSample[25]
t975 = bootSample[975]
### basic
lBasic = 2*mean(ranGamma)-t975
UBasic = 2*mean(ranGamma)-t25
### Normal
se = sqrt(variance)
lNormal = mean(ranGamma)-qnorm(0.975,0,1)*se
UNormal = mean(ranGamma)-qnorm(0.025,0,1)*se
### percentile
lPerc = t25
UPerc = t975
#######
bootCI = boot::boot.ci(bs,conf=0.95,type=c("norm","basic","perc"))
####
#studying reliability of boostrap small sample, n=10 but 1000 bootstrap samples
percentages = c()
for(n in seq(10,100,10))
{
counter <- 0
for(i in 1:1000)
{
ranGammaSmall = rgamma(n,shape=2,scale=2)
bs = boot::boot(ranGammaSmall,statistic,1000)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))$basic
if (CI[4] <= 4 && 4 <= CI[5])
counter=counter+1
}
percentages <- append(percentages,counter/1000)
}
statistic <- function(x,d) mean(x[d])
percentages = c()
for(n in seq(10,100,10))
{
counter <- 0
for(i in 1:1000)
{
ranGammaSmall = rgamma(n,shape=2,scale=2)
bs = boot::boot(ranGammaSmall,statistic,1000)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))$basic
if (CI[4] <= 4 && 4 <= CI[5])
counter=counter+1
}
percentages <- append(percentages,counter/1000)
}
#studying reliability of boostrap small sample, n=10 but 1000 bootstrap samples
percentages = c()
for(n in seq(10,100,10))
{
print(n)
counter <- 0
for(i in 1:1000)
{
ranGammaSmall = rgamma(n,shape=2,scale=2)
bs = boot::boot(ranGammaSmall,statistic,1000)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))$basic
if (CI[4] <= 4 && 4 <= CI[5])
counter=counter+1
}
percentages <- append(percentages,counter/1000)
}
plot(seq(10,100,10),percentages,col="RED",xlab="n",xlim=c(10,100),ylim=c(0.85,1),cex=0.85,pch=19)
par(new=TRUE)
plot(seq(0,110,10),rep(0.95,12),col="BLUE",xlim=c(10,100),ylim=c(0.85,1),xlab="",ylab="",axes=FALSE,type="l")
#parametric
# x is vecor (k,theta)
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
d <- rgamma(100,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
shape = params[1]
scale = params[2]
theta = c()
for(i in 1:1000)
theta <- append(theta,mean(rgamma(100,shape=shape,scale=scale)))
bias = mean(theta)-mean(d)
variance = var(theta)
h = hist(theta,xlab="x",col="BLUE")#theta hat stjerna
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="RED",xlab="x",ylab="density function")
#parametric
# x is vecor (k,theta)
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
d <- rgamma(100,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
shape = params[1]
scale = params[2]
theta = c()
for(i in 1:1000)
theta <- append(theta,mean(rgamma(100,shape=shape,scale=scale)))
bias = mean(theta)-mean(d)
variance = var(theta)
h = hist(theta,xlab="x",col="BLUE")#theta hat stjerna
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="RED",xlab="x",ylab="density function")
install.packages("alabama")
#parametric
# x is vecor (k,theta)
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
d <- rgamma(100,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
shape = params[1]
scale = params[2]
theta = c()
for(i in 1:1000)
theta <- append(theta,mean(rgamma(100,shape=shape,scale=scale)))
bias = mean(theta)-mean(d)
variance = var(theta)
h = hist(theta,xlab="x",col="BLUE")#theta hat stjerna
plot(seq(2.5,5,0.001),dgamma(seq(2.5,5,0.001),shape=200,scale=1/50),type="l",col="RED",xlab="x",ylab="density function")
#parametric
# x is vecor (k,theta)
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
d <- rgamma(100,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
shape = params[1]
scale = params[2]
theta = c()
for(i in 1:1000)
theta <- append(theta,mean(rgamma(100,shape=shape,scale=scale)))
bias = mean(theta)-mean(d)
variance = var(theta)
h = hist(theta,xlab="x",col="BLUE")#theta hat stjerna
#parametric
# x is vecor (k,theta)
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
d <- rgamma(100,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
shape = params[1]
scale = params[2]
theta = c()
for(i in 1:1000)
theta <- append(theta,mean(rgamma(100,shape=shape,scale=scale)))
bias = mean(theta)-mean(d)
variance = var(theta)
h = hist(theta,xlab="x",col="BLUE")#theta hat stjerna
mle = c(shape,scale)
statistic <- function(x) mean(x)
ran <- function(d,mle) rgamma(100,shape=mle[1],scale=mle[2])
bs = boot::boot(d,statistic,ran.gen = ran,R = 1000,sim = "parametric",mle=mle)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))
#####
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
statistic <- function(x) mean(x)
ran <- function(d,mle,n) rgamma(n,shape=mle[1],scale=mle[2])
percentages <- c()
for(n in seq(10,100,10))
{
counter <- 0
for(i in 1:1000)
{
d <- rgamma(n,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
mle = c(params[1],params[2])
bs = boot::boot(d,statistic,ran.gen = function(d,mle) ran(d,mle,n),R = 1000,sim = "parametric",mle=mle)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))$basic
if (CI[4] <= 4 && 4 <= CI[5])
counter = counter+1;
}
percentages <- append(percentages,counter/1000)
}
#parametric
# x is vecor (k,theta)
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
d <- rgamma(100,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
shape = params[1]
scale = params[2]
theta = c()
for(i in 1:1000)
theta <- append(theta,mean(rgamma(100,shape=shape,scale=scale)))
bias = mean(theta)-mean(d)
variance = var(theta)
h = hist(theta,xlab="x",col="BLUE")#theta hat stjerna
mle = c(shape,scale)
statistic <- function(x) mean(x)
ran <- function(d,mle) rgamma(100,shape=mle[1],scale=mle[2])
bs = boot::boot(d,statistic,ran.gen = ran,R = 1000,sim = "parametric",mle=mle)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))
#####
loglikelihood <- function(x,data)
{
n <-length(data)
(x[1]-1)*sum(log(data))-(1/x[2])*sum(data)-n*lgamma(x[1])-n*x[1]*log(x[2])
}
hin <- function(x)
{
h = rep(0,2)
h[1] = x[1]
h[2] = x[2]
h
}
statistic <- function(x) mean(x)
ran <- function(d,mle,n) rgamma(n,shape=mle[1],scale=mle[2])
percentages <- c()
for(n in seq(10,100,10))
{
counter <- 0
for(i in 1:1000)
{
d <- rgamma(n,shape=2,scale=2)
params = alabama::constrOptim.nl(c(1,1),function(x) -loglikelihood(x,d),hin = hin)$par
mle = c(params[1],params[2])
bs = boot::boot(d,statistic,ran.gen = function(d,mle) ran(d,mle,n),R = 1000,sim = "parametric",mle=mle)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))$basic
if (CI[4] <= 4 && 4 <= CI[5])
counter = counter+1;
}
percentages <- append(percentages,counter/1000)
}
plot(seq(10,100,10),percentages,col="RED",xlab="n",xlim=c(10,100),ylim=c(0.85,1),cex=0.85,pch=19)
par(new=TRUE)
plot(seq(0,110,10),rep(0.95,12),col="BLUE",xlim=c(10,100),ylim=c(0.85,1),xlab="",ylab="",axes=FALSE,type="l")
mean(percentages)
statistic <- function(x,d) mean(x[d])
#studying reliability of boostrap small sample, n=10 but 1000 bootstrap samples
percentages = c()
for(n in seq(10,100,10))
{
counter <- 0
for(i in 1:1000)
{
ranGammaSmall = rgamma(n,shape=2,scale=2)
bs = boot::boot(ranGammaSmall,statistic,1000)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))$basic
if (CI[4] <= 4 && 4 <= CI[5])
counter=counter+1
}
percentages <- append(percentages,counter/1000)
}
plot(seq(10,100,10),percentages,col="RED",xlab="n",xlim=c(10,100),ylim=c(0.85,1),cex=0.85,pch=19)
par(new=TRUE)
plot(seq(0,110,10),rep(0.95,12),col="BLUE",xlim=c(10,100),ylim=c(0.85,1),xlab="",ylab="",axes=FALSE,type="l")
mean(percentages)
statistic <- function(x,d) var(x[d]) # sample variance
percentages = c()
for(n in seq(10,100,10))
{
print(n)
counter <- 0
for(i in 1:1000)
{
ranGammaSmall = rgamma(n,shape=2,scale=2)
bs = boot::boot(ranGammaSmall,statistic,1000)
CI = boot::boot.ci(bs,conf=0.95,type=c("basic"))$basic
if (CI[4] <= 8 && 8 <= CI[5])
counter=counter+1
}
percentages <- append(percentages,counter/1000)
print(n)
}
plot(seq(10,100,10),percentages,col="RED",xlab="n",xlim=c(10,100),ylim=c(0.6,1),cex=0.85,pch=19)
par(new=TRUE)
plot(seq(0,110,10),rep(0.95,12),col="BLUE",xlim=c(10,100),ylim=c(0.6,1),xlab="",ylab="",axes=FALSE,type="l")
##very bad results!! no pivotality? do studentized CI!
mean(percentages)
percentages <- c()
for(n in seq(10,100,10))
{
print(n)
counter <- 0
for(i in 1:100)
{
ranGammaSmall = rgamma(n,shape=2,scale=2)
sampleVar = var(ranGammaSmall)
theta1 <- c()
w <- c()
for(j in 1:1000)
{
newSample = sample(ranGammaSmall,n,replace=TRUE)
theta1 <- append(theta1,var(newSample))
t <- c()
for(k in 1:50)
t <- append(t,var(sample(newSample,n,replace=TRUE)))
se = sqrt(var(t))
w = append(w,((var(newSample)-sampleVar)/se))
}
w = sort(w)
std = sqrt(var(theta1))
lower = sampleVar-std*w[975]
upper = sampleVar-std*w[25]
if (lower <= 8 && 8 <= upper)
counter = counter+1;
}
percentages <- append(percentages,counter/100)
}
plot(seq(10,100,10),percentages,col="RED",xlab="n",xlim=c(10,100),ylim=c(0.85,1),cex=0.85,pch=19)
par(new=TRUE)
plot(seq(0,110,10),rep(0.95,12),col="BLUE",xlim=c(10,100),ylim=c(0.85,1),xlab="",ylab="",axes=FALSE,type="l")
mean(percentages)
